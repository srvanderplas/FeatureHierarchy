# fixed.ef.model <- glm(correct~plottype+sd.cluster*sd.line+k, data=subset(useranswers.long, answer.type=="group"), family = binomial(link="logit"))
# summary(fixed.ef.model)
#
# participant.scores <- ddply(useranswers, .(nick_name, ip_address, sd.cluster), summarize, line.correct=mean(line.correct), group.correct=mean(group.correct))
# participant.scores <- melt(participant.scores, id.vars=1:3, variable.name="type", value.name="percent.correct")
# participant.scores$type <- gsub(".correct", "", participant.scores$type)
# qplot(data=participant.scores, x=type, y=percent.correct, color=type, geom="violin") + facet_wrap(~sd.cluster)
#
#
# dataset.answers <- ddply(useranswers, .(param_value, param_idx), summarize, mean.line.correct=mean(line.correct), mean.group.correct=mean(group.correct))
# plot.answers <- ddply(useranswers, .(pic_id, test_param, param_value, p_value, plottype, param_idx), summarize, line.correct=mean(line.correct), group.correct=mean(group.correct))
# plot.answers <- merge(plot.answers, dataset.answers)
# plot.answers$plottype.fac <- as.character(as.numeric(factor(plot.answers$plottype))-1)
#
# qplot(data=plot.answers, x=line.correct, y=group.correct, color=factor(param_idx), shape=plottype.fac, geom="point", size=I(10)) + facet_wrap(~param_value) + scale_shape_manual(guide="legend", values=as.character(0:9), labels=levels(plot.answers$plottype))
#
# qplot(data=plot.answers, x=line.correct-mean.line.correct, y=group.correct-mean.group.correct, color=factor(param_idx), shape=plottype.fac, geom="point", size=I(10)) + facet_wrap(~param_value) + scale_shape_manual(guide="legend", values=as.character(0:9), labels=levels(plot.answers$plottype))
#
# head(plot.answers)
#
# plain.color <- subset(plot.answers, plottype%in%c("plain", "color"))
# qplot(data=plain.color, x=line.correct-mean.line.correct, y=group.correct-mean.group.correct, color=factor(param_idx), shape=plottype.fac, geom="point", size=I(10)) + facet_wrap(~param_value) + scale_shape_manual(guide="legend", values=c("x", "c"), labels=c("plain", "color"))
modeldata <- useranswers[,c(1, 4, 7:25, 2, 3, 5, 6)]
modeldata$outcome <- paste(c("", "line")[1+as.numeric(modeldata$line.correct==1)], c("", "group")[1+as.numeric(modeldata$group.correct==1)], c("", "neither")[1+as.numeric(modeldata$neither==1)], sep="")
modeldata$outcome[modeldata$both.correct==1] <- "both"
modeldata <- merge(modeldata, lineups[,c("pic_id", "data_name", "param_value")], all.x=T, all.y=T)
modeldata$dataset <- factor(str_extract(modeldata$data_name, "set-\\d{1,3}") %>% str_replace("set-", "") %>% as.numeric)
modeldata$individualID <- factor(sprintf("%s-%s", modeldata$ip_address, modeldata$nick_name))
library(lme4)
line.model <- glmer(line.correct~plottype + (1|individualID) + (1|dataset), data=modeldata, family = binomial(link="logit"))
group.model <- glmer(group.correct~plottype + (1|individualID) + (1|dataset), data=modeldata, family = binomial(link="logit"))
library(stringr)
library(plyr)
library(reshape2)
library(ggplot2)
lineups <- read.csv("./Images/Turk16/data-picture-details.csv", stringsAsFactors=FALSE)
lineups$pic_id_old <- lineups$pic_id
lineups$pic_id <- 1:nrow(lineups)
userdata <- read.csv("./Data/turk16_results.csv", stringsAsFactors=FALSE)
userdata$response.id <- 1:nrow(userdata)
table(userdata$ip_address, userdata$nick_name)
tmp <- merge(userdata[!is.na(userdata$pic_id),], lineups[,c("pic_id", "sample_size", "test_param", "param_value", "p_value", "obs_plot_location")], all.x=T, all.y=F)
tmp$k <- as.numeric(substr(tmp$param_value, 3, 3))
tmp$sd.line <- as.numeric(substr(tmp$param_value, 12, 15))
tmp$sd.cluster <- as.numeric(substr(tmp$param_value, 25, 28))
setwd("~/Documents/Rprojects/FeatureHierarchy")
library(stringr)
library(plyr)
library(reshape2)
library(ggplot2)
lineups <- read.csv("./Images/Turk16/data-picture-details.csv", stringsAsFactors=FALSE)
lineups$pic_id_old <- lineups$pic_id
lineups$pic_id <- 1:nrow(lineups)
userdata <- read.csv("./Data/turk16_results.csv", stringsAsFactors=FALSE)
userdata$response.id <- 1:nrow(userdata)
table(userdata$ip_address, userdata$nick_name)
tmp <- merge(userdata[!is.na(userdata$pic_id),], lineups[,c("pic_id", "sample_size", "test_param", "param_value", "p_value", "obs_plot_location")], all.x=T, all.y=F)
tmp$k <- as.numeric(substr(tmp$param_value, 3, 3))
tmp$sd.line <- as.numeric(substr(tmp$param_value, 12, 15))
tmp$sd.cluster <- as.numeric(substr(tmp$param_value, 25, 28))
library(stringr)
library(plyr)
library(reshape2)
library(ggplot2)
lineups <- read.csv("./Images/Turk16/data-picture-details.csv", stringsAsFactors=FALSE)
lineups$pic_id_old <- lineups$pic_id
lineups$pic_id <- 1:nrow(lineups)
userdata <- read.csv("./Data/turk16_results.csv", stringsAsFactors=FALSE)
userdata$response.id <- 1:nrow(userdata)
userdata <- read.csv("./Data/turk16_results.csv", stringsAsFactors=FALSE)
userdata$response.id <- 1:nrow(userdata)
table(userdata$ip_address, userdata$nick_name)
tmp <- merge(userdata[!is.na(userdata$pic_id),], lineups[,c("pic_id", "sample_size", "test_param", "param_value", "p_value", "obs_plot_location")], all.x=T, all.y=F)
tmp$k <- as.numeric(substr(tmp$param_value, 3, 3))
tmp$sd.line <- as.numeric(substr(tmp$param_value, 12, 15))
tmp$sd.cluster <- as.numeric(substr(tmp$param_value, 25, 28))
userdata <- read.csv("./Data/turk16_results.csv", stringsAsFactors=FALSE)
userdata$response.id <- 1:nrow(userdata)
# table(userdata$ip_address, userdata$nick_name)
tmp <- merge(userdata[!is.na(userdata$pic_id),], lineups[,c("pic_id", "sample_size", "test_param", "param_value", "p_value", "obs_plot_location")], all.x=T, all.y=F)
tmp$k <- as.numeric(substr(tmp$param_value, 3, 3))
tmp$sd.line <- as.numeric(substr(tmp$param_value, 12, 15))
tmp$sd.cluster <- as.numeric(substr(tmp$param_value, 25, 28))
correct.ans <- function(x,y){
x1 <- as.numeric(str_trim(unlist(str_split(x, ","))))
answers <- str_trim(unlist(str_split(y, ",")))
lineplot <- as.numeric(answers[1])
groupplot <- as.numeric(answers[2])
c(line.correct=lineplot%in%x1, group.correct=groupplot%in%x1, n.answers=length(x1), both.correct = lineplot%in%x1 & groupplot%in%x1, neither=!(lineplot%in%x1 | groupplot%in%x1))
}
useranswers <- ddply(tmp, .(response.id), function(df) correct.ans(df$response_no, df$obs_plot_location))
useranswers <- merge(useranswers, tmp)
useranswers$plottype <- gsub("turk16-", "", useranswers$test_param)
useranswers$plottype <- factor(useranswers$plottype, levels=c("plain", "trend", "color", "shape", "colorShape", "colorEllipse", "colorTrend",  "trendError", "colorShapeEllipse", "colorEllipseTrendError"))
useranswers$sd.cluster <- factor(useranswers$sd.cluster)
useranswers$sd.line <- factor(useranswers$sd.line)
useranswers$k <- factor(useranswers$k)
useranswers <- ddply(useranswers, .(param_value, test_param), transform, param_idx=as.numeric(factor(pic_id)))
modeldata <- useranswers[,c(1, 4, 7:25, 2, 3, 5, 6)]
modeldata$outcome <- paste(c("", "line")[1+as.numeric(modeldata$line.correct==1)], c("", "group")[1+as.numeric(modeldata$group.correct==1)], c("", "neither")[1+as.numeric(modeldata$neither==1)], sep="")
modeldata$outcome[modeldata$both.correct==1] <- "both"
modeldata <- merge(modeldata, lineups[,c("pic_id", "data_name", "param_value")], all.x=T, all.y=T)
modeldata$dataset <- factor(str_extract(modeldata$data_name, "set-\\d{1,3}") %>% str_replace("set-", "") %>% as.numeric)
modeldata$individualID <- factor(sprintf("%s-%s", modeldata$ip_address, modeldata$nick_name))
library(lme4)
library(magrittr)
library(dplyr)
line.model <- glmer(line.correct~plottype + (1|individualID) + (1|dataset), data=modeldata, family = binomial(link="logit"))
modeldata <- useranswers[,c(1, 4, 7:25, 2, 3, 5, 6)]
modeldata$outcome <- paste(c("", "line")[1+as.numeric(modeldata$line.correct==1)], c("", "group")[1+as.numeric(modeldata$group.correct==1)], c("", "neither")[1+as.numeric(modeldata$neither==1)], sep="")
modeldata$outcome[modeldata$both.correct==1] <- "both"
modeldata <- merge(modeldata, lineups[,c("pic_id", "data_name", "param_value")], all.x=T, all.y=T)
modeldata$dataset <- factor(str_extract(modeldata$data_name, "set-\\d{1,3}") %>% str_replace("set-", "") %>% as.numeric)
modeldata$individualID <- factor(sprintf("%s-%s", modeldata$ip_address, modeldata$nick_name))
library(lme4)
line.model <- glmer(line.correct~plottype + (1|individualID) + (1|dataset), data=modeldata, family = binomial(link="logit"))
head(modeldata)
?glmer
line.model <- glmer(line.correct~plottype + (1|individualID) + (1|dataset), data=modeldata, family = binomial(link="logit"), control=glmerControl(boundary.tol=1e-6, check.conv.grad=.makeCC("warning", tol=1e-4, relTol=NULL)))
line.model <- glmer(line.correct~k + sd.trend + sd.cluster + plottype + (1|individualID) + (1|dataset), data=modeldata, family = binomial(link="logit"), control=glmerControl(boundary.tol=1e-6, check.conv.grad=.makeCC("warning", tol=1e-4, relTol=NULL)))
line.model <- glmer(line.correct~k + sd.line + sd.cluster + plottype + (1|individualID) + (1|dataset), data=modeldata, family = binomial(link="logit"), control=glmerControl(boundary.tol=1e-6, check.conv.grad=.makeCC("warning", tol=1e-4, relTol=NULL)))
line.model <- glmer(line.correct~k + sd.line + sd.cluster + plottype + (1|individualID) + (1|dataset), data=modeldata, family = binomial(link="logit"), control=glmerControl(boundary.tol=1e-3, check.conv.grad=.makeCC("warning", tol=1e-2, relTol=NULL)))
summary(line.model)
line.model <- glmer(line.correct~ plottype + (1|individualID) + (k + sd.line + sd.cluster |dataset), data=modeldata, family = binomial(link="logit"))
line.model <- glmer(line.correct~ plottype + (1|individualID) + (1|dataset), data=modeldata, family = binomial(link="logit"))
summary(line.model)
rm(list=ls())
options(replace.assign=TRUE,width=70)
require(knitr)
opts_chunk$set(fig.path='figure/', cache.path='cache/', fig.align='center', fig.width=5, fig.height=5, par=TRUE, cache=TRUE, concordance=TRUE, autodep=TRUE, message=F, warning=F)
library(stringr)
library(lubridate)
library(reshape2)
library(plyr)
library(dplyr)
library(magrittr)
library(ggplot2)
library(grid)
suppressMessages(library(gridExtra))
library(RColorBrewer)
library(nullabor)
library(digest)
library(Cairo)
library(lme4)
library(xtable)
source("../../Code/MixtureLineups.R")
source("../../Code/theme_lineup.R")
setwd("~/Documents/Rprojects/FeatureHierarchy/writeup/Draft1")
rm(list=ls())
options(replace.assign=TRUE,width=70)
require(knitr)
opts_chunk$set(fig.path='figure/', cache.path='cache/', fig.align='center', fig.width=5, fig.height=5, par=TRUE, cache=TRUE, concordance=TRUE, autodep=TRUE, message=F, warning=F)
library(stringr)
library(lubridate)
library(reshape2)
library(plyr)
library(dplyr)
library(magrittr)
library(ggplot2)
library(grid)
suppressMessages(library(gridExtra))
library(RColorBrewer)
library(nullabor)
library(digest)
library(Cairo)
library(lme4)
library(xtable)
source("../../Code/MixtureLineups.R")
source("../../Code/theme_lineup.R")
lineups <- read.csv("../../Images/Turk16/data-picture-details-gini.csv", stringsAsFactors=FALSE)
lineups$pic_id_old <- lineups$pic_id
lineups$pic_id <- 1:nrow(lineups)
userdata <- read.csv("../../Data/turk16_results.csv", stringsAsFactors=FALSE)
userdata$response.id <- 1:nrow(userdata)
# table(userdata$ip_address, userdata$nick_name)
tmp <- merge(userdata[!is.na(userdata$pic_id),], lineups[,c("pic_id", "sample_size", "test_param", "param_value", "p_value", "obs_plot_location")], all.x=T, all.y=F)
tmp$k <- as.numeric(substr(tmp$param_value, 3, 3))
tmp$sd.line <- as.numeric(substr(tmp$param_value, 12, 15))
tmp$sd.cluster <- as.numeric(substr(tmp$param_value, 25, 28))
correct.ans <- function(x,y){
x1 <- as.numeric(str_trim(unlist(str_split(x, ","))))
answers <- str_trim(unlist(str_split(y, ",")))
lineplot <- as.numeric(answers[1])
groupplot <- as.numeric(answers[2])
giniplot <- ifelse(groupplot==as.numeric(answers[3]) | lineplot==as.numeric(answers[3]), NA, as.numeric(answers[3]))
c(n.answers=length(x1), trend.correct=lineplot%in%x1, cluster.correct=groupplot%in%x1, both.correct = lineplot%in%x1 & groupplot%in%x1, neither.correct=!(lineplot%in%x1 | groupplot%in%x1), none.correct=!(lineplot%in%x1 | groupplot%in%x1 | giniplot%in%x1), gini.correct=giniplot%in%x1)
}
useranswers <- ddply(tmp, .(response.id), function(df) correct.ans(df$response_no, df$obs_plot_location))
useranswers <- merge(useranswers, tmp)
useranswers$plottype <- gsub("turk16-", "", useranswers$test_param)
useranswers$plottype <- factor(useranswers$plottype, levels=c("plain", "trend", "color", "shape", "colorShape", "colorEllipse", "colorTrend",  "trendError", "colorShapeEllipse", "colorEllipseTrendError"))
useranswers$sd.cluster <- factor(useranswers$sd.cluster)
useranswers$sd.line <- factor(useranswers$sd.line)
useranswers$k <- factor(useranswers$k)
useranswers <- ddply(useranswers, .(param_value, test_param), transform, param_idx=as.numeric(factor(pic_id)))
modeldata <- useranswers[,c(1, 2, 9:27, 3:8)]
modeldata$outcome <- paste(c("", "trend")[1+as.numeric(modeldata$trend.correct==1)],
c("", "cluster")[1+as.numeric(modeldata$cluster.correct==1)],
c("", "neither")[1+as.numeric(modeldata$neither.correct==1)],
c("", "gini")[1+as.numeric(modeldata$gini.correct==1)],
sep="")
modeldata$outcome[modeldata$both.correct==1] <- "both"
modeldata <- merge(modeldata, lineups[,c("pic_id", "data_name", "param_value")], all.x=T, all.y=T)
modeldata$dataset <- factor(str_extract(modeldata$data_name, "set-\\d{1,3}") %>% str_replace("set-", "") %>% as.numeric)
modeldata$individualID <- factor(sprintf("%s-%s", modeldata$ip_address, modeldata$nick_name))
modeldata$k <- factor(modeldata$k, levels=c(3, 5))
modeldata$parameter.value <- factor(gsub("set-\\d{1,3}-", "", modeldata$data_name))
modeldata$start_time <- ymd_hms(modeldata$start_time)
modeldata$end_time <- ymd_hms(modeldata$end_time)
modeldata$trial.time <- with(modeldata, end_time-start_time)
modeldata <- ddply(modeldata, .(k), transform, trend.diff=c("easy", "medium", "hard")[as.numeric(droplevels(sd.line))], cluster.diff=c("easy", "medium", "hard")[as.numeric(droplevels(sd.cluster))])
parameter.design <- unique(modeldata[,c("dataset", "k", "trend.diff", "cluster.diff")])
plot.eval.tab <- apply(with(modeldata, table(dataset, plottype)), 1:2, sum)
# long dataset for table-esque plots
modeldata.long <- melt(modeldata, id.vars=which(!grepl("(correct)|(outcome)", names(modeldata))), value.vars=c("trend.correct", "cluster.correct", "neither.correct"), value.name="correct", variable.name="answer.type")
modeldata.long$answer.type <- gsub(".correct", "", modeldata.long$answer.type)
modeldata.long <- filter(modeldata.long, answer.type%in%c("cluster", "trend", "neither"))
modeldata.long$correct <- as.numeric(modeldata.long$correct)
modeldata.long$answer.type <- factor(modeldata.long$answer.type, levels=c("cluster", "trend", "neither"))
modeldata.long$cluster.diff2 <- factor(modeldata.long$cluster.diff, levels=c("easy", "medium", "hard"), labels=c("Cluster: Easy", "Cluster: Medium", "Cluster: Hard"))
modeldata.long$trend.diff2 <- factor(modeldata.long$trend.diff, levels=c("easy", "medium", "hard"), labels=c("Trend: Easy", "Trend: Medium", "Trend: Hard"))
modeldata.long$plottype <-
modeldata.long$plottype %>%
str_replace("color", "Color + ") %>%
str_replace("[sS]hape", "Shape + ") %>%
str_replace("[tT]rend", "Trend + ") %>%
str_replace("Ellipse", "Ellipse + ") %>%
str_replace("Error", "Error + ") %>%
str_replace("plain", "Plain") %>%
str_replace("( \\+ )$", "") %>%
factor(levels=c("Plain", "Color", "Shape", "Trend", "Trend + Error",
"Color + Shape", "Color + Ellipse", "Color + Trend",
"Color + Shape + Ellipse", "Color + Ellipse + Trend + Error"),
labels=c("Plain", "Color", "Shape", "Trend", "Trend + Error",
"Color + Shape", "Color + Ellipse", "Color + Trend",
"Color + Shape\n + Ellipse", "Color + Ellipse\n + Trend + Error"))
line.model <- glmer(trend.correct ~
# trend.diff*cluster.diff*k +
plottype +
(1|individualID) +
(1|dataset),
data = modeldata,
family = binomial(link="logit"),
control=glmerControl(optimizer="bobyqa"))
line.fixef <- data.frame(summary(line.model)$coefficients, confint(line.model, method="Wald"))
names(line.fixef) <- c("Estimate", "StdError", "Z", "p value", "LB", "UB")
line.fixef$OR <- exp(line.fixef[,1])
line.fixef$label <- gsub("(Intercept)", "", gsub("plottype", "", rownames(line.fixef)), fixed=T)
suppressMessages(require(multcomp))
type_compare <- glht(line.model, mcp(plottype="Tukey"))
line.fixef$letters <- cld(type_compare)$mcletters$Letters
line.fixef.aes <- line.fixef[grepl("(color)|([Ss]hape)|([Tt]rend)|(Ellipse)|(Error)", rownames(line.fixef)),]
line.fixef.aes <- line.fixef.aes[order(line.fixef.aes$OR, decreasing = T),]
line.fixef.aes$label <-
line.fixef.aes$label %>%
str_replace("color", "Color + ") %>%
str_replace("[sS]hape", "Shape + ") %>%
str_replace("[tT]rend", "Trend + ") %>%
str_replace("Ellipse", "Ellipse + ") %>%
str_replace("Error", "Error + ") %>%
str_replace("( \\+ )$", "")
line.fixef.aes$label <- factor(line.fixef.aes$label, levels=line.fixef.aes$label[order(line.fixef.aes$OR, decreasing = T)], ordered=T)
line.fixef.aes$LB <- exp(line.fixef.aes$LB)
line.fixef.aes$UB <- exp(line.fixef.aes$UB)
qplot(data=line.fixef.aes, x=label, y=OR, ymin=LB, ymax=UB, geom="pointrange") +
geom_text(aes(x=label, y=0, label=letters)) +
coord_flip() +
ylab("Odds Ratio + 95% Wald Interval") +
xlab("Plot Type") +
geom_hline(yintercept=1, colour="grey70") +
ggtitle("Odds of Selecting Line Target Plot") +
theme_bw()
names(line.fixef.aes)[1:4] <- c("Log Odds", "Std. Error", "Z", "P value")
names(line.fixef.aes)[8] <- "Plot Aesthetic"
names(line.fixef.aes)[9] <- "Tukey Post Hoc Differences"
print(xtable(line.fixef.aes[,c(8, 1:4, 9)], caption=c("Fitted values of fixed effects for the model described in \\eqref{eqn:linearModel}. Only Trend+Error plots significantly increase the probability of detecting the linear target plot (with data generated from $M_T$), while most other aesthetic combinations decrease the probability of detecting the linear target plot.", "Fixed effects for linear target logistic model"), label="tab:line.fixef", align=c('r', 'r', 'r', 'r', 'r', 'r', 'r'), digits=c(0, 0, 4, 4, 2, 4, 0)), include.rownames=F, file="figure/linear-fixef-table")
line.ranef.individual <- as.data.frame(ranef(line.model)[[1]])
names(line.ranef.individual) <- "value"
line.ranef.individual$id <- rownames(line.ranef.individual)
line.ranef <- ldply(ranef(line.model), .%>%as.matrix %>% melt)
names(line.ranef) <- c("type", "id", "level", "value")
line.ranef <- merge(line.ranef, parameter.design, all.x=T, all.y=T, by.x="id", by.y="dataset")
line.ranef$trend.diff <- factor(line.ranef$trend.diff, levels=c("easy", "medium", "hard"))
line.ranef$cluster.diff <- factor(line.ranef$cluster.diff, levels=c("easy", "medium", "hard"))
line.ranef$diff <- sprintf("Line: %s, Cluster: %s", line.ranef$trend.diff, line.ranef$cluster.diff)
# ggplot(data=line.ranef.individual) +
#   geom_density(aes(x=value))
setwd("~/Documents/Rprojects/FeatureHierarchy/writeup/Draft1")
rm(list=ls())
options(replace.assign=TRUE,width=70)
require(knitr)
opts_chunk$set(fig.path='figure/', cache.path='cache/', fig.align='center', fig.width=5, fig.height=5, par=TRUE, cache=TRUE, concordance=TRUE, autodep=TRUE, message=F, warning=F)
library(stringr)
library(lubridate)
library(reshape2)
library(plyr)
library(dplyr)
library(magrittr)
library(ggplot2)
library(grid)
suppressMessages(library(gridExtra))
library(RColorBrewer)
library(nullabor)
library(digest)
library(Cairo)
library(lme4)
library(xtable)
source("../../Code/MixtureLineups.R")
source("../../Code/theme_lineup.R")
x1 <- rnorm(25, mean=4, sd=0.5)
x2 <- rnorm(25, mean=0, sd=0.5)
y1 <- rnorm(25, mean=1, sd=0.5)
y2 <- rnorm(25, mean=2, sd=0.5)
qplot(c(x1,x2), c(y1,y2)) + theme_bw() + xlab("x") + ylab("y")
x <- rnorm(60)
y <- rnorm(60)
group <- rep(1:4, length=60)
qplot(x,y, color=factor(group%/%2), shape=factor(group%/%2)) + theme_bw() + xlab("x") + ylab("y") + scale_color_brewer(palette="Set1") + theme(legend.position="none")
x1 <- runif(50,-.75,1.25)
y1 <- x1^2 - x1 + rnorm(50, sd=0.1)
x2 <- runif(25,-.75,1.25)
y2 <- x2 + rnorm(25, sd=0.1)
qplot(c(x1,x2),c(y1,y2)) + theme_bw() + xlab("x") + ylab("y")
sd <- c(0.1, 0.2, 0.3, 0.4)
res <- ldply(sd, function(x) { data.frame(sd.trend=x, sim.line(N=45, sd.trend=x)) })
res$label <- paste("sigma[T] :",res$sd.trend)
qplot(x,y, data=res, pch=I(1)) + facet_grid(facets=.~label, labeller="label_parsed") + theme_bw() +
theme(plot.margin=unit(c(0,0,0,0), "cm"))
sd <- c(0.15, 0.2, 0.25, 0.3)
colors <-  c("#1f77b4", "#ff7f0e", "#2ca02c", "#d62728", "#9467bd",
"#8c564b", "#e377c2", "#7f7f7f", "#bcbd22", "#17becf")
shapes <- c(1,0,3,4,8,5,2,6,-0x25C1, -0x25B7)
colortm <- read.csv("../..//Data/color-perceptual-kernel.csv")
# colortm[3,4] <- 0
# colortm[4,3] <- 0
colortm[8,] <- 0
colortm[,8] <- 0
shapetm <- read.csv("../../Data/shape-perceptual-kernel.csv")
# shapetm[9:10,] <- 0
# shapetm[, 9:10] <- 0
shapetm[9,] <- 0
shapetm[,9] <- 0
shapetm[10,] <- 0
shapetm[,10] <- 0
color3pal <- best.combo(3, colors, colortm)
color5pal <- best.combo(5, colors, colortm)
shape3pal <- best.combo(3, shapes, shapetm)
shape5pal <- best.combo(5, shapes, shapetm)
res <- ldply(sd, function(x) { set.seed(325098573); data.frame(sd.cluster=x, sim.clusters(K=3, N=45, sd.cluster=x)) })
res$K <- 3
res$color <- color3pal[res$group]
res$shape <- shape3pal[res$group]
res2 <- ldply(sd, function(x) { set.seed(325098573); data.frame(sd.cluster=x, sim.clusters(K=5, N=75, sd.cluster=x)) })
res2$K <- 5
res2$color <- color5pal[res2$group]
res2$shape <- shape5pal[res2$group]
res <- rbind(res, res2)
suppressMessages(library(ggplot2))
res$label <- paste("sigma[C] :",res$sd.cluster)
res$Klabel <- paste("K :",res$K)
ggplot(aes(x=x, y=y, color=color, shape=shape), data=res) +
geom_point() +
facet_grid(facets=Klabel~label, labeller="label_parsed") + theme_bw() +
theme(plot.margin=unit(c(0,0,0,0), "cm"), legend.position="none") +
scale_shape_identity() + scale_color_identity() + theme(aspect.ratio=1)
lambda <- c(0, .25, .5, .75, 1)
colors <-  c("#1f77b4", "#ff7f0e", "#2ca02c", "#d62728", "#9467bd",
"#8c564b", "#e377c2", "#7f7f7f", "#bcbd22", "#17becf")
res <- ldply(lambda, function(x) { data.frame(lambda=x, {set.seed(325098573); mixture.sim(x, K=3, N=45, sd.trend=.25, sd.cluster=.25)}) })
res$K <- 3
res$color <- color3pal[res$group]
res$shape <- shape3pal[res$group]
res2 <- ldply(lambda, function(x) { data.frame(lambda=x, {set.seed(325098573); mixture.sim(x, K=5, N=75, sd.trend=.25, sd.cluster=.2)}) })
res2$K <- 5
res2$color <- color5pal[res2$group]
res2$shape <- shape5pal[res2$group]
res <- rbind(res, res2)
res$label <- paste("lambda :",res$lambda)
res$Klabel <- paste("K :",res$K)
ggplot(aes(x=x, y=y, color=color, shape=shape), data=res) +
geom_point() +
facet_grid(facets=Klabel~label, labeller="label_parsed") + theme_bw() +
theme(plot.margin=unit(c(0,0,0,0), "cm"), legend.position="none") +
scale_shape_identity() + scale_color_identity() + theme(aspect.ratio=1)
load("figure/lineupex/data.Rdata")
d_ply(data, .(set), function(df){
i <- unique(df$set)
for(j in 1:nrow(plot.parms)){
p = gen.plot(df, get.aes(plot.parms[j,]), get.stats(plot.parms[j,]))
print(p)
}
})
colors <- c("#1f77b4", "#ff7f0e", "#2ca02c", "#d62728", "#9467bd",
"#8c564b", "#e377c2", "#7f7f7f", "#bcbd22", "#17becf")
qplot(x=1:10, y=0, color=colors, size=I(5)) + scale_color_identity() + theme_lineup()
shapes <- c(1,0,3,4,8,5,2,6,-0x25C1, -0x25B7)
qplot(x=1:10, y=0, shape=shapes, size=I(5)) + scale_shape_identity() + theme_lineup()
lineups <- read.csv("../../Images/Turk16/data-picture-details-gini.csv", stringsAsFactors=FALSE)
lineups$pic_id_old <- lineups$pic_id
lineups$pic_id <- 1:nrow(lineups)
users <- read.csv("../../Images/Turk16/turk16_users.csv", stringsAsFactors=F, header=F)
names(users) <- c("nick_name", "age", "gender", "education", "ip_address")
users$age <- factor(users$age, levels=0:10, labels=c("NA", "<18", "18-25", "26-30", "31-35", "36-40", "41-45", "45-50", "51-55", "56-60", "61+"))
users$gender <- factor(users$gender, levels=0:2, labels=c("NA", "Male", "Female"))
users$education <- factor(users$education, levels=0:5, labels=c("NA", "High School or less", "Some college", "Bachelor's degree", "Some graduate school", "Graduate degree"))
userdata <- read.csv("../../Data/turk16_results.csv", stringsAsFactors=FALSE)
userdata$response.id <- 1:nrow(userdata)
# table(userdata$ip_address, userdata$nick_name)
tmp <- merge(userdata[!is.na(userdata$pic_id),], lineups[,c("pic_id", "sample_size", "test_param", "param_value", "p_value", "obs_plot_location")], all.x=T, all.y=F)
tmp$k <- as.numeric(substr(tmp$param_value, 3, 3))
tmp$sd.line <- as.numeric(substr(tmp$param_value, 12, 15))
tmp$sd.cluster <- as.numeric(substr(tmp$param_value, 25, 28))
correct.ans <- function(x,y){
x1 <- as.numeric(str_trim(unlist(str_split(x, ","))))
answers <- str_trim(unlist(str_split(y, ",")))
lineplot <- as.numeric(answers[1])
groupplot <- as.numeric(answers[2])
giniplot <- ifelse(groupplot==as.numeric(answers[3]) | lineplot==as.numeric(answers[3]), NA, as.numeric(answers[3]))
c(n.answers=length(x1), trend.correct=lineplot%in%x1, cluster.correct=groupplot%in%x1, both.correct = lineplot%in%x1 & groupplot%in%x1, neither.correct=!(lineplot%in%x1 | groupplot%in%x1), none.correct=!(lineplot%in%x1 | groupplot%in%x1 | giniplot%in%x1), gini.correct=giniplot%in%x1)
}
useranswers <- ddply(tmp, .(response.id), function(df) correct.ans(df$response_no, df$obs_plot_location))
useranswers <- merge(useranswers, tmp)
useranswers$plottype <- gsub("turk16-", "", useranswers$test_param)
useranswers$plottype <- factor(useranswers$plottype, levels=c("plain", "trend", "color", "shape", "colorShape", "colorEllipse", "colorTrend",  "trendError", "colorShapeEllipse", "colorEllipseTrendError"))
useranswers$sd.cluster <- factor(useranswers$sd.cluster)
useranswers$sd.line <- factor(useranswers$sd.line)
useranswers$k <- factor(useranswers$k)
useranswers$start_time <- ymd_hms(useranswers$start_time)
useranswers$end_time <- ymd_hms(useranswers$end_time)
useranswers <- ddply(useranswers, .(param_value, test_param), transform, param_idx=as.numeric(factor(pic_id)))
useranswers <- ddply(useranswers, .(ip_address, nick_name), transform, ntrials = length(unique(pic_id)), trial.no = rank(start_time), trial.num=order(start_time))
# Remove data from <18 participants
useranswers <- filter(useranswers, !nick_name%in%users$nick_name[users$age=="<18"])
users <- filter(users, age!="<18")
modeldata <- useranswers[,c(1, 2, 9:30, 3:8)]
# Remove data from participants who did not complete 10 trials
incomplete.participants <- unique(modeldata$nick_name[modeldata$ntrials<10])
incomplete.participant.data <- sum(modeldata$ntrials<10)
message(paste0(sum(modeldata$ntrials<10), " trials removed because participant completed <10 trials total."))
# Remove data from participants who completed > 10 trials
modeldata <- filter(modeldata, ntrials>=10)
extra.participant.data <- sum(modeldata$trial.num>10)
message(paste0(sum(modeldata$trial.num>10), " trials removed because participant >10 trials."))
modeldata <- filter(modeldata, trial.num<=10)
# Remove users from database who didn't complete any trials
message(paste0(sum(!users$nick_name%in%modeldata$nick_name), " users removed from user database - no trials found."))
users <- users %>% filter(nick_name%in%modeldata$nick_name)
modeldata <- modeldata[,-30]
modeldata$outcome <- paste(c("", "trend")[1+as.numeric(modeldata$trend.correct==1)],
c("", "cluster")[1+as.numeric(modeldata$cluster.correct==1)],
c("", "neither")[1+as.numeric(modeldata$neither.correct==1)],
c("", "gini")[1+as.numeric(modeldata$gini.correct==1)],
sep="")
modeldata$outcome[modeldata$both.correct==1] <- "both"
modeldata$first.trial <- modeldata$trial.no == 1
modeldata$simpleoutcome <- gsub("gini", "", modeldata$outcome)
modeldata$simpleoutcome <- factor(modeldata$simpleoutcome, levels=c("neither", "cluster", "trend","both"))
modeldata <- merge(modeldata, lineups[,c("pic_id", "data_name", "param_value")], all.x=T, all.y=T)
modeldata$dataset <- factor(str_extract(modeldata$data_name, "set-\\d{1,3}") %>% str_replace("set-", "") %>% as.numeric)
modeldata$individualID <- factor(sprintf("%s-%s", modeldata$ip_address, modeldata$nick_name))
modeldata$k <- factor(modeldata$k, levels=c(3, 5))
modeldata$parameter.value <- factor(gsub("set-\\d{1,3}-", "", modeldata$data_name))
modeldata$start_time <- ymd_hms(modeldata$start_time)
modeldata$end_time <- ymd_hms(modeldata$end_time)
modeldata$trial.time <- with(modeldata, end_time-start_time)
modeldata <- ddply(modeldata, .(k), transform, trend.diff=c("easy", "medium", "hard")[as.numeric(droplevels(sd.line))], cluster.diff=c("easy", "medium", "hard")[as.numeric(droplevels(sd.cluster))])
modeldata$trend.diff <- factor(modeldata$trend.diff, levels=c("easy", "medium", "hard"))
modeldata$cluster.diff <- factor(modeldata$cluster.diff, levels=c("easy", "medium", "hard"))
modeldata$cluster.diff2 <- factor(modeldata$cluster.diff, levels=c("easy", "medium", "hard"), labels=c("Cluster: Easy", "Cluster: Medium", "Cluster: Hard"))
modeldata$trend.diff2 <- factor(modeldata$trend.diff, levels=c("easy", "medium", "hard"), labels=c("Trend: Easy", "Trend: Medium", "Trend: Hard"))
parameter.design <- unique(modeldata[,c("dataset", "k", "trend.diff", "cluster.diff")])
plot.eval.tab <- apply(with(modeldata, table(dataset, plottype)), 1:2, sum)
# long dataset for table-esque plots
modeldata.long <- melt(modeldata, id.vars=which(!grepl("(correct)|(outcome)", names(modeldata))), value.vars=c("trend.correct", "cluster.correct", "neither.correct"), value.name="correct", variable.name="answer.type")
modeldata.long$answer.type <- gsub(".correct", "", modeldata.long$answer.type)
modeldata.long <- filter(modeldata.long, answer.type%in%c("cluster", "trend", "neither"))
modeldata.long$correct <- as.numeric(modeldata.long$correct)
modeldata.long$answer.type <- factor(modeldata.long$answer.type, levels=c("cluster", "trend", "neither"))
modeldata.long$plottype <-
modeldata.long$plottype %>%
str_replace("color", "Color + ") %>%
str_replace("[sS]hape", "Shape + ") %>%
str_replace("[tT]rend", "Trend + ") %>%
str_replace("Ellipse", "Ellipse + ") %>%
str_replace("Error", "Error + ") %>%
str_replace("plain", "Plain") %>%
str_replace("( \\+ )$", "") %>%
factor(levels=c("Plain", "Color", "Shape", "Trend", "Trend + Error",
"Color + Shape", "Color + Ellipse", "Color + Trend",
"Color + Shape + Ellipse", "Color + Ellipse + Trend + Error"),
labels=c("Plain", "Color", "Shape", "Trend", "Trend + Error",
"Color + Shape", "Color + Ellipse", "Color + Trend",
"Color + Shape + Ellipse", "Color + Ellipse + Trend + Error"))
totaltime <- ddply(modeldata, .(individualID), summarize, total.experiment.time = max(end_time)-min(start_time))
user.data <- modeldata %>% group_by(individualID) %>%
summarize(answers=length(individualID),
cluster=sum(cluster.correct),
trend=sum(trend.correct))
clusters <- as.data.frame(table(user.data$cluster))
trends <- as.data.frame(table(user.data$trend))
names(clusters) <- c("x", "Cluster")
clusters$Trend <- trends$Freq
clm <- melt(clusters, measure.var=2:3)
ggplot() + geom_point(aes(x, value, colour=variable, shape=variable), size=3, data=clm) + theme_bw() + scale_colour_brewer("Target", palette="Set1") + scale_shape_discrete("Target") + theme(legend.position="bottom") + ylab("Number of participants") + xlab("Number of target identifications (out of ten)") + geom_line(aes(x, value, colour=variable, group=variable), data=clm)
qplot(age, data=users) + theme_bw() + xlab("Age of participants") + ylab("# Participants") + ggtitle("Participant Age Distribution")
qplot(education, data=users) + theme_bw() + xlab("(self-reported) Highest level of participants' education") + ylab("# Participants") + ggtitle("Participant Education Levels")
user.data <- modeldata %>% group_by(individualID) %>%
summarize(answers=length(individualID),
cluster=sum(cluster.correct),
trend=sum(trend.correct))
str(modeldata)
library(devtools);install_github("hadley/dplyr")
